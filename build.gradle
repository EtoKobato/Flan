buildscript {
    dependencies {
        classpath group: 'com.diluv.schoomp', name: 'Schoomp', version: '1.1.0'
    }
}

plugins {
    id 'fabric-loom' version '0.8.12'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version "1.5.20-M1"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.github.johnrengelman.shadow" version "5.2.0"
}

import com.diluv.schoomp.Webhook
import com.diluv.schoomp.message.Message
import com.diluv.schoomp.message.embed.Embed

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.minecraft_version + "-" + project.mod_version
group = project.maven_group

configurations {
    shadowLibs
}

repositories {
    mavenCentral()
    maven {
        name = 'Fabric-Permission-API'
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
        content {
            includeGroup 'io.github.ladysnake'
            includeGroupByRegex 'io\\.github\\.onyxstudios.*'
        }
    }
    maven {
        name = "Gunpowder"
        url = "https://maven.martmists.com/releases"
    }
    maven {
        name = "HavenKing"
        url = "https://hephaestus.dev/release"
    }
    maven {
        name = "Permissions"
        url = "https://maven.nucleoid.xyz"
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.25'
    shadowLibs group: 'org.yaml', name: 'snakeyaml', version: '1.25'

    modCompileOnly "me.lucko:fabric-permissions-api:${project.fabric_permissions_api}"
    modImplementation "io.github.ladysnake:PlayerAbilityLib:${project.player_ability_lib}"

    modRuntime "io.github.gunpowder:gunpowder-base:${gunpowder_version}"
    modImplementation "io.github.gunpowder:gunpowder-currency:${gunpowder_currency_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.17 (21w19a) upwards uses Java 16.
    it.options.release = 16
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    configurations = [project.configurations.shadowLibs]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

task apiJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set "api-source"
    from sourceSets.main.output
    include "io/github/flemmli97/flan/api/**"
}

task remapApiJar(type: net.fabricmc.loom.task.RemapJarTask){
    archiveClassifier.set "api"
    input.set apiJar.archiveFile
    addNestedDependencies = false
    dependsOn apiJar
    from sourceSets.main.output
    include "fabric.mod_api.json" //Include this so it gets remapped as a dependency
    rename("fabric.mod_api.json", "fabric.mod.json")
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            artifact(remapApiJar)
            artifactId project.archives_base_name
            version project.version
        }
    }
    repositories {
        maven {
            url "https://gitlab.com/api/v4/projects/21830712/packages/maven"
            //url "https://maven.pkg.github.com/flemmli97/RuneCraftory"
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.gitlab.token") ?: System.getenv("GPR_GITLAB_TOKEN")
                //password = project.findProperty("gpr.github.token") ?: System.getenv("GPR_TOKEN")
            }
        }
    }
}

def changelog(int versions) {
    try {
        def changelog = ""
        def match = 0
        file("Changelog.md").eachLine {
            if (it.matches("${project.project_name} ([0-9].[0-9].[0-9])"))
                match++
            if (match <= versions) {
                changelog += it + "\n"
            } else
                return
        }
        return changelog + "\n\n"
    } catch (exception) {
        return "${project.project_name} ${project.mod_version}\n==========\n"
    }
}

//Splits the changelog into multiple parts if they get bigger than discords embed field size (1024)
def discordChangelog() {
    def changelog = changelog(1)
    def res = new ArrayList()
    if (changelog.size() < 1024) {
        res.add(changelog)
        return res;
    }
    def temp = ""
    changelog.split("\n").each {
        it = it + "\n"
        if ((temp.size() + it.size()) >= 1024) {
            res.add(temp)
            temp = it
        } else
            temp += it
    }
    res.add(temp)
    return res
}

curseforge {
    apiKey = findProperty('curseApiToken') ?: 0

    project {
        id = "${curse_id}"
        "${project.curse_versions}".split(', ').each {
            addGameVersion "${it}"
        }
        mainArtifact(remapJar) {
            def txt = changelog(1).replace("\n-", "\n\n- ")
            txt = txt + "\n\n" + "For past versions see: https://github.com/Flemmli97/Flan/blob/1.17/Changelog.md"
            changelog = txt
            changelogType = "markdown"
            releaseType = 'release'
        }
        relations {
            "${project.curse_dep}".split(', ').each {
                requiredDependency "${it}"
            }
        }
    }
}

tasks.getByName("curseforge").doLast {
    try {
        def newFileId = tasks.getByName("curseforge${project.curse_id}").property('mainArtifact').fileID

        def webhook = new Webhook(findProperty('discordHook'), "${project.project_name} Upload")

        def message = new Message()
        def version = project.curse_versions.split(', ')[0]
        message.setUsername("Curseforge Release")
        message.setContent("<@&852113509243682817> ${project.project_name} ${project.mod_version} for Minecraft ${version} has been released!")
        message.setAvatarUrl("https://cdn.discordapp.com/avatars/680540027255652407/e4b7a058b24843ae13389a9a3cc3ae8c.png?size=128")

        def embed = new Embed()
        embed.addField('Get it here (When it is accepted)', "${project.findProperty('curse_page')}/files/${newFileId}", false)
        def changelog = discordChangelog()
        if (changelog.size() == 1)
            embed.addField('Change Log', "```md\n${changelog.get(0) ?: 'Unavailable :('}```", false)
        else
            changelog.forEach {
                embed.addField("Change Log", "```md\n${it}```", false)
            }
        embed.setColor(0xFF8000)
        message.addEmbed(embed)

        webhook.sendMessage(message)
    }

    catch (IOException e) {
        println 'Failed to push to the Discord webhook.'
    }
}

task buildUploadAll(group: "publishing") {
    dependsOn clean, build, publish, tasks.getByName("curseforge")
    build.mustRunAfter clean
    tasks.findByName("curseforge").mustRunAfter publish
}

tasks.getByName("curseforge").dependsOn build
publish.dependsOn build
