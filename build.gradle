buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.diluv.schoomp', name: 'Schoomp', version: '1.2.6'
    }
}

subprojects {

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()

    archivesBaseName = rootProject.modid
    version = project.minecraft_version + "-" + rootProject.mod_version + "-" + project.name
    group = rootProject.maven_group

    jar {
        from(rootProject.file("LICENSE"))
        manifest {
            attributes([
                    'Specification-Title'     : rootProject.name,
                    'Specification-Vendor'    : "Flemmli97",
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : rootProject.name + "-" + project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : "Flemmli97",
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            ])
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
        maven {
            name = "Architectury"
            url "https://maven.architectury.dev/"
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    task cleanBuild(group: "build") {
        dependsOn clean
    }

    task fullRebuild(group: "build") {
        dependsOn cleanBuild, build
        compileJava.mustRunAfter cleanBuild
    }

    task buildAndPublish(group: "publishing") {
        dependsOn fullRebuild, publish
        publish.mustRunAfter fullRebuild
    }

    task buildAndPublishLocal(group: "publishing") {
        dependsOn fullRebuild, publishToMavenLocal
        publishToMavenLocal.mustRunAfter fullRebuild
    }
}

def singleUpload = true

def changelog(int versions) {
    try {
        def changelog = ""
        def match = 0
        file("Changelog.md").eachLine {
            if (it.matches("${project.project_name} [0-9]\\.[0-9]+\\.[0-9]+(\\.[0-9]*)?"))
                match++
            if (match <= versions) {
                changelog += it + "\n"
            } else
                return
        }
        return changelog + "\n\n"
    } catch (exception) {
        return "${project.project_name} ${project.mod_version}\n==========\n"
    }
}

//Splits the changelog into multiple parts if they get bigger than discords embed field size (1024)
def discordChangelog() {
    def changelog = changelog(1)
    def res = new ArrayList()
    if (changelog.size() < 1024) {
        res.add(changelog)
        return res;
    }
    def temp = ""
    changelog.split("\n").each {
        it = it + "\n"
        if ((temp.size() + it.size()) >= 1024) {
            res.add(temp)
            temp = it
        } else
            temp += it
    }
    res.add(temp)
    return res
}

import com.diluv.schoomp.Webhook
import com.diluv.schoomp.message.Message
import com.diluv.schoomp.message.embed.Embed

def discordNotif(fabric, forge) {
    try {
        def webhook = new Webhook(findProperty('discordHook'), "${project.project_name} Upload")

        def message = new Message()
        def version = project.curse_versions.split(', ')[0]
        message.setUsername("Curseforge Release")
        message.setContent("${project.project_name} ${project.mod_version} for Minecraft ${version} has been released!")
        message.setAvatarUrl("https://cdn.discordapp.com/avatars/680540027255652407/e4b7a058b24843ae13389a9a3cc3ae8c.png?size=128")

        def embed = new Embed()

        if (fabric) {
            def fileIDfabric = project("fabric").tasks.getByName("curseforge${project.curse_id_fabric}").property('mainArtifact').fileID
            embed.addField('Get the fabric version here (When it is accepted)', "${project.findProperty('curse_page_fabric')}/files/${fileIDfabric}", false)
        }
        if (forge) {
            def fileIDforge = project("forge").tasks.getByName("curseforge${project.curse_id_forge}").property('mainArtifact').fileID
            embed.addField('Get the forge version here (When it is accepted)', "${project.findProperty('curse_page_forge')}/files/${fileIDforge}", false)
        }
        def changelog = discordChangelog()
        if (changelog.size() == 1)
            embed.addField('Change Log', "```md\n${changelog.get(0) ?: 'Unavailable :('}```", false)
        else
            changelog.forEach {
                embed.addField("Change Log", "```md\n${it}```", false)
            }
        embed.setColor(0xFF8000)
        message.addEmbed(embed)

        webhook.sendMessage(message)
    }
    catch (IOException e) {
        println 'Failed to push to the Discord webhook.'
    }
}

//Uploading fabric only
task buildUploadFabric(group: "publishing") {
    dependsOn project("fabric").buildAndPublish, ":fabric:curseforge"
    doLast {
        if(singleUpload)
            discordNotif(true, false)
    }
}

//Uploading forge only
task buildUploadForge(group: "publishing") {
    dependsOn project("forge").buildAndPublish, ":forge:curseforge"
    doLast {
        if(singleUpload)
            discordNotif(false, true)
    }
}

//Use if uploading multiple files at same time to prevent double notifications
task setMultiUpload {
    doFirst {
        singleUpload = false
    }
}

task buildAndUpload(group: "publishing") {
    dependsOn setMultiUpload, project("common").buildAndPublish, buildUploadFabric, buildUploadForge
    buildUploadFabric.mustRunAfter setMultiUpload
    buildUploadForge.mustRunAfter setMultiUpload
    doLast {
        discordNotif(true, true)
    }
}