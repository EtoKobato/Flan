ext {
    shadow_dep = [group: "com.github.johnrengelman.shadow", name: "com.github.johnrengelman.shadow.gradle.plugin", version: "7.1.0"]
}

apply from: "https://raw.githubusercontent.com/Flemmli97/GradleScripts/mc-architectury-v1/forge.gradle"

loom {
    forge {
        mixinConfigs = ["flan.mixins.json", "flan.forge.mixins.json"]
    }
    runs {
        data {
            data()
            programArgs "--all", "--mod", "flan"
            programArgs "--output", project(":common").file("src/generated/resources").absolutePath
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = "FTB"
        url = "https://maven.saps.dev/minecraft"
    }
    maven {
        name = "CurseMaven"
        url "https://www.cursemaven.com"
    }
    maven {
        name = "minecolonies"
        url "https://ldtteam.jfrog.io/ldtteam/modding/"
    }
    maven {
        url "https://maven.tterrag.com/"
    }
}

dependencies {
    modCompileOnly dicemcmm

    //modRuntimeOnly "dev.ftb.mods:ftb-ranks-forge:${ftb_ranks}"
    //modRuntimeOnly "dev.ftb.mods:ftb-chunks-forge:${ftb_chunks}"

    //CompileOnly cause dependencies
    modCompileOnly "com.ldtteam:minecolonies:${minecolonies}"

    //For testing fakeplayers
    modRuntimeOnly cyclic

    // For compat testing
    // modRuntimeOnly "curse.maven:drawers-223852:3807626"
    modRuntimeOnly create
    modRuntimeOnly "com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel}"
    modRuntimeOnly "com.tterrag.registrate:Registrate:${registrate}"
}

task apiJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set "forge-api-source"
    from project(":common").sourceSets.main.output + sourceSets.main.output
    include "io/github/flemmli97/flan/api/**"
}

task remapApiJar(type: net.fabricmc.loom.task.RemapJarTask) {
    archiveClassifier.set "forge-api"
    input.set apiJar.archiveFile
    addNestedDependencies = false
    dependsOn apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapApiJar) {
                classifier "api"
                builtBy remapApiJar
            }
        }
    }
}