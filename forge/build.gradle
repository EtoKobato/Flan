plugins {
    id 'eclipse'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

minecraft {
    mappings channel: 'parchment', version: parchment_version + "-" + minecraft_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            arg "-mixin.config=" + modid + ".mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            jvmArgs "-Dmixin.debug.export=true"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            arg "-mixin.config=" + modid + ".mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            jvmArgs "-Dmixin.debug.export=true"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            arg "-mixin.config=" + modid + ".mixins.json"
            args '--mod', modid, '--all', '--output', project(":common").file('src/generated/resources/'), '--existing', file('src/main/resources/')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

configurations {
    shade // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
}

repositories {
    maven {
        name = "FTB"
        url = "https://maven.saps.dev/minecraft"
    }
    maven {
        name = "CurseMaven"
        url "https://www.cursemaven.com"
    }
    maven {
        name = "minecolonies"
        url "https://ldtteam.jfrog.io/ldtteam/modding/"
    }
}

repositories {
    mavenCentral()
    maven {
        name = "FTB"
        url = "https://maven.saps.dev/minecraft"
    }
    maven {
        name = "CurseMaven"
        url "https://www.cursemaven.com"
    }
    maven {
        name = "minecolonies"
        url "https://ldtteam.jfrog.io/ldtteam/modding/"
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"
    implementation project(path: ":common", configuration: "namedElements")

    compileOnly fg.deobf("dev.ftb.mods:ftb-ranks-forge:${ftb_ranks}")
    compileOnly fg.deobf(dicemcmm)

    runtimeOnly fg.deobf("dev.ftb.mods:ftb-chunks-forge:${rootProject.ftb_chunks}")
    //CompileOnly cause dependencies
    compileOnly fg.deobf("com.ldtteam:minecolonies:${rootProject.minecolonies}")
}

processResources {
    def ver = project.version.replace("-${project.name}", "")
    inputs.property "version", ver

    exclude "*.accesswidener"

    filesMatching("META-INF/mods.toml") {
        expand "version": ver, "homepage": curse_page_fabric, "mcversion": minecraft_version
    }
}

jar {
    manifest {
        attributes("MixinConfigs": "${modid}.mixins.json")
    }
}

//Get the output of the common jars instead of adding it the compile classpaths
shadowJar {
    from files(project(":common").shadowJar.archiveFile.collect {i->
        zipTree(i)
    })
    configurations = [project.configurations.shade]
    dependsOn project(":common").shadowJar
    classifier null
}

reobf {
    shadowJar {}
}
tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfShadowJar')

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

cleanBuild {
    doFirst {
        delete file('build/classes')
        delete file('build/libs')
        delete file('build/resources')
        delete file('build/tmp')
    }
}

project.afterEvaluate {
    cleanBuild.dependsOn -= clean
}

fullRebuild {
    dependsOn project(":common").fullRebuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact javadocJar
            artifactId project.archivesBaseName
            version project.version
        }
    }

    repositories {
        maven {
            url "https://gitlab.com/api/v4/projects/21830712/packages/maven"
            //url "https://maven.pkg.github.com/flemmli97/<>"
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.gitlab.token") ?: System.getenv("GPR_GITLAB_TOKEN")
                //password = project.findProperty("gpr.github.token") ?: System.getenv("GPR_TOKEN")
            }
        }
    }
}

curseforge {
    apiKey = findProperty('curseApiToken') ?: 0
    project {
        id = "${curse_id_forge}"
        "${project.curse_versions}".split(', ').each {
            addGameVersion "${it}"
        }
        addGameVersion "Forge"
        mainArtifact(jar) {
            def txt = rootProject.changelog(1).replace("\n-", "\n\n- ")
            txt = txt + "\n\n" + "For past versions see: ${project.full_changelog}"
            changelog = txt
            changelogType = "markdown"
            releaseType = 'release'
        }
        /*relations {
            "${project.curse_dep_forge}".split(', ').each {
                requiredDependency "${it}"
            }
        }*/
        afterEvaluate {
            uploadTask.dependsOn("jar")
        }
    }
}
