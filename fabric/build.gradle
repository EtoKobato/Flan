plugins {
    id 'idea'
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

loom {
    runs {
        client {
            vmArgs "-Dmixin.debug.export=true"
        }
    }
    mixin {
        useLegacyMixinAp = false
    }
    //accessWidenerPath.set project(":common").file("src/main/resources/${modid}.accesswidener")
}

configurations {
    shade // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
}

repositories {
    maven {
        name = 'Fabric-Permission-API'
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        name = "Gunpowder"
        url = "https://maven.martmists.com/releases"
    }
    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
        content {
            includeGroup 'io.github.ladysnake'
            includeGroupByRegex 'io\\.github\\.onyxstudios.*'
        }
    }
    maven {
        name = "HavenKing"
        url = "https://hephaestus.dev/release"
    }
    maven {
        name = "FTB"
        url = "https://maven.saps.dev/minecraft"
    }
    maven {
        name = "CurseMaven"
        url "https://www.cursemaven.com"
    }
    maven { url = "https://jitpack.io" }
    maven {
        url = "https://maven.jamieswhiteshirt.com/libs-release/"
        content {
            includeGroup 'com.jamieswhiteshirt'
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${minecraft_version}:${rootProject.parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    implementation project(path: ":common")

    modImplementation "me.lucko:fabric-permissions-api:${rootProject.fabric_permissions_api}"

    // Rip currency on their maven and prob rip currency all together
    modCompileOnly(gunpowder_currency) {
        exclude group: "com.google.guava", module:"failureaccess"
    }
    modImplementation octo_economy_api
    modRuntimeOnly eights_economy

    //modImplementation "io.github.ladysnake:PlayerAbilityLib:${rootProject.player_ability_lib}"
    modCompileOnly "io.github.ladysnake:PlayerAbilityLib:${rootProject.player_ability_lib}"

    modCompileOnly "dev.ftb.mods:ftb-ranks-fabric:${rootProject.ftb_ranks}"

    modRuntimeOnly "dev.ftb.mods:ftb-chunks-fabric:${rootProject.ftb_chunks}"
    //CompileOnly cause too many dependency
    modCompileOnly goml_reserved
    modCompileOnly include("com.jamieswhiteshirt:rtree-3i-lite-fabric:0.3.0")
}

processResources {
    def ver = project.version.replace("-${project.name}", "")
    inputs.property "version", ver

    filesMatching("fabric.mod.json") {
        expand "version": ver, "homepage": curse_page_fabric, "fabric_version": fabric_version, "mcversion": minecraft_version
    }
    exclude '.cache/**'
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

//Get the output of the common jars instead of adding it the compile classpaths
shadowJar {
    from files(project(":common").shadowJar.archiveFile.collect {i->
        zipTree(i)
    })
    configurations = [project.configurations.shade]
    dependsOn project(":common").shadowJar
    classifier "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
}

fullRebuild {
    dependsOn project(":common").fullRebuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact remapJar
            artifact remapSourcesJar
            artifact javadocJar
            artifactId project.modid
            version project.version
        }
    }

    repositories {
        maven {
            url "https://gitlab.com/api/v4/projects/21830712/packages/maven"
            //url "https://maven.pkg.github.com/flemmli97/<>"
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.gitlab.token") ?: System.getenv("GPR_GITLAB_TOKEN")
                //password = project.findProperty("gpr.github.token") ?: System.getenv("GPR_TOKEN")
            }
        }
    }
}

curseforge {
    apiKey = findProperty('curseApiToken') ?: 0
    project {
        id = "${curse_id_fabric}"
        "${project.curse_versions}".split(', ').each {
            addGameVersion "${it}"
        }
        addGameVersion "Fabric"
        mainArtifact(remapJar) {
            def txt = rootProject.changelog(1).replace("\n-", "\n\n- ")
            txt = txt + "\n\n" + "For past versions see: ${project.full_changelog}"
            changelog = txt
            changelogType = "markdown"
            releaseType = 'release'
        }
        relations {
            "${project.curse_dep_fabric}".split(', ').each {
                requiredDependency "${it}"
            }
        }
        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }
}
